// Generated by gencpp from file rostu2024/DribbleModule.msg
// DO NOT EDIT!


#ifndef ROSTU2024_MESSAGE_DRIBBLEMODULE_H
#define ROSTU2024_MESSAGE_DRIBBLEMODULE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rostu2024
{
template <class ContainerAllocator>
struct DribbleModule_
{
  typedef DribbleModule_<ContainerAllocator> Type;

  DribbleModule_()
    : left_motor(0.0)
    , right_motor(0.0)  {
    }
  DribbleModule_(const ContainerAllocator& _alloc)
    : left_motor(0.0)
    , right_motor(0.0)  {
  (void)_alloc;
    }



   typedef double _left_motor_type;
  _left_motor_type left_motor;

   typedef double _right_motor_type;
  _right_motor_type right_motor;





  typedef boost::shared_ptr< ::rostu2024::DribbleModule_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rostu2024::DribbleModule_<ContainerAllocator> const> ConstPtr;

}; // struct DribbleModule_

typedef ::rostu2024::DribbleModule_<std::allocator<void> > DribbleModule;

typedef boost::shared_ptr< ::rostu2024::DribbleModule > DribbleModulePtr;
typedef boost::shared_ptr< ::rostu2024::DribbleModule const> DribbleModuleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rostu2024::DribbleModule_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rostu2024::DribbleModule_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rostu2024::DribbleModule_<ContainerAllocator1> & lhs, const ::rostu2024::DribbleModule_<ContainerAllocator2> & rhs)
{
  return lhs.left_motor == rhs.left_motor &&
    lhs.right_motor == rhs.right_motor;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rostu2024::DribbleModule_<ContainerAllocator1> & lhs, const ::rostu2024::DribbleModule_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rostu2024

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rostu2024::DribbleModule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rostu2024::DribbleModule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rostu2024::DribbleModule_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rostu2024::DribbleModule_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rostu2024::DribbleModule_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rostu2024::DribbleModule_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rostu2024::DribbleModule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fbb6fd297edf2b990d3b5effd8454d72";
  }

  static const char* value(const ::rostu2024::DribbleModule_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfbb6fd297edf2b99ULL;
  static const uint64_t static_value2 = 0x0d3b5effd8454d72ULL;
};

template<class ContainerAllocator>
struct DataType< ::rostu2024::DribbleModule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rostu2024/DribbleModule";
  }

  static const char* value(const ::rostu2024::DribbleModule_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rostu2024::DribbleModule_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 left_motor\n"
"float64 right_motor\n"
;
  }

  static const char* value(const ::rostu2024::DribbleModule_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rostu2024::DribbleModule_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_motor);
      stream.next(m.right_motor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DribbleModule_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rostu2024::DribbleModule_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rostu2024::DribbleModule_<ContainerAllocator>& v)
  {
    s << indent << "left_motor: ";
    Printer<double>::stream(s, indent + "  ", v.left_motor);
    s << indent << "right_motor: ";
    Printer<double>::stream(s, indent + "  ", v.right_motor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSTU2024_MESSAGE_DRIBBLEMODULE_H
